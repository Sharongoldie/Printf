#include "main.h"

/**
 * _printf - produces custom printf function
 * @format: format string containing the characters and specifiers
 * Description: This function call the get_print() function that
 * will determine which printing function to call depending on the conversion
 * specifiers contained into fmt
 * Return: Number of characters printed (excluding NULL byte used to end out
 * or -1 if error occurs
 */

int _printf(const char *format, ...)
{
	int (*pfunc)(va_list, flags_t *);
	const char *p;
	va_list args;
	flags_t flags = {0, 0, 0};

	register int count = 0;

	va_start(arguements, format);
	if (!format || (format[0] == '%' && !format[1]))
		return (-1);
	if (format[0] == '%' && format [1] == ' ' && !format [2])
		return (-1);
	for (p = format; *p; p++)
	{
		if (*p == '%')
		{
			p++;
			if (*p == '%')
			{
				count += _putchar ('%');
			}
			while (get_flag (*p, &flags))
				p++;
			pfunc = get_print(*p);
			count += (pfunc)
				? pfunc (arg, &flags)
				: _printf("%%%". *p);
		}else
			count += _putchar(*p);
	}
	_putchar(-1);
	va_end(arg);
	return (count);
}
